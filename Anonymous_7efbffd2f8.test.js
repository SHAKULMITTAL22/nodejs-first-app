// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4


import request from 'supertest';
import User from './userModel';
import app from './index';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';

jest.mock('./userModel');

describe('POST /login', () => {
  let user;

  beforeEach(() => {
    user = {
      email: 'test@test.com',
      password: 'test123',
    };

    User.findOne.mockResolvedValue(user);
  });

  test('should redirect to /register if user does not exist', async () => {
    User.findOne.mockResolvedValue(null);

    const res = await request(app)
      .post('/login')
      .send(user);

    expect(res.headers.location).toBe('/register');
  });

  test('should render login page with error message if password is incorrect', async () => {
    bcrypt.compare.mockResolvedValue(false);

    const res = await request(app)
      .post('/login')
      .send(user);

    expect(res.text).toContain('Incorrect Password');
  });

  test('should set a cookie and redirect to home page if login is successful', async () => {
    bcrypt.compare.mockResolvedValue(true);
    jwt.sign.mockReturnValue('testToken');

    const res = await request(app)
      .post('/login')
      .send(user);

    expect(res.headers['set-cookie']).toEqual(
      expect.arrayContaining([expect.stringMatching(/token=testToken/)])
    );
    expect(res.headers.location).toBe('/');
  });
});
