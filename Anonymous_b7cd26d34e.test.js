// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4


import express from "express";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { isAuthenticated } from './index.js';

jest.mock('jsonwebtoken');
jest.mock('mongoose');

describe('isAuthenticated', () => {
    let req, res, next;

    beforeEach(() => {
        req = {
            cookies: {
                token: null
            },
            user: null
        };
        res = {
            redirect: jest.fn()
        };
        next = jest.fn();
    });

    test('should redirect to login if no token', async () => {
        await isAuthenticated(req, res, next);
        expect(res.redirect).toHaveBeenCalledWith("/login");
    });

    test('should set req.user and call next if token is valid', async () => {
        jwt.verify.mockReturnValueOnce({ _id: '123' });
        mongoose.findById.mockResolvedValueOnce({ _id: '123', name: 'Test User' });
        req.cookies.token = 'validToken';
        
        await isAuthenticated(req, res, next);
        
        expect(req.user).toEqual({ _id: '123', name: 'Test User' });
        expect(next).toHaveBeenCalled();
    });

    test('should throw error if token is invalid', async () => {
        jwt.verify.mockImplementationOnce(() => {
            throw new Error('Invalid token');
        });
        req.cookies.token = 'invalidToken';
        
        await expect(isAuthenticated(req, res, next)).rejects.toThrow('Invalid token');
    });
});
