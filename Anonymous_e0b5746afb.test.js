// Test generated by RoostGPT for test aman12Feb using AI Type Open AI and AI Model gpt-4


import express from "express";
import request from "supertest";
import path from "path";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import User from './User';
import app from './index';

jest.mock('./User');

describe('POST /register', () => {
  const name = 'Test User';
  const email = 'test@test.com';
  const password = 'password123';

  beforeAll(() => {
    mongoose.connect('mongodb://localhost/testDatabase', { useNewUrlParser: true, useUnifiedTopology: true });
  });

  afterAll(async () => {
    await mongoose.connection.close();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should register a new user', async () => {
    User.findOne.mockResolvedValue(null);
    User.create.mockResolvedValue({ _id: '1234', name, email, password });

    const response = await request(app)
      .post('/register')
      .send({ name, email, password });

    expect(User.findOne).toHaveBeenCalledWith({ email });
    expect(User.create).toHaveBeenCalledWith({ name, email, password: expect.any(String) });
    expect(response.header['set-cookie']).toBeDefined();
    expect(response.status).toBe(302);
    expect(response.headers.location).toBe('/');
  });

  test('should not register a user if email already exists', async () => {
    User.findOne.mockResolvedValue({ _id: '1234', name, email, password });

    const response = await request(app)
      .post('/register')
      .send({ name, email, password });

    expect(User.findOne).toHaveBeenCalledWith({ email });
    expect(User.create).not.toHaveBeenCalled();
    expect(response.status).toBe(302);
    expect(response.headers.location).toBe('/login');
  });
});
